// <auto-generated />
using System;
using Alexandria.Games.HeroesOfTheStorm.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Alexandria.Games.HeroesOfTheStorm.EF.Migrations
{
    [DbContext(typeof(HeroesOfTheStormContext))]
    [Migration("20190213070510_AddMatchResult")]
    partial class AddMatchResult
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("heroesofthestorm")
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Alexandria.Games.HeroesOfTheStorm.EF.Models.ExternalRanking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BattleNetRegion");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("GameMode");

                    b.Property<int>("MMRSource");

                    b.Property<int?>("Ranking");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<Guid>("UserProfileId");

                    b.HasKey("Id");

                    b.ToTable("ExternalRankings");
                });

            modelBuilder.Entity("Alexandria.Games.HeroesOfTheStorm.EF.Models.Map", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Alexandria.Games.HeroesOfTheStorm.EF.Models.MapBan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("MapId");

                    b.Property<Guid>("MatchSeriesId");

                    b.Property<Guid>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("MapBans");
                });

            modelBuilder.Entity("Alexandria.Games.HeroesOfTheStorm.EF.Models.MatchReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("MapId");

                    b.Property<Guid>("MatchSeriesId");

                    b.Property<bool>("ReplayParsed");

                    b.Property<string>("ReplayURL");

                    b.Property<DateTimeOffset?>("ReplayedParsedAt");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("MatchReports");
                });

            modelBuilder.Entity("Alexandria.Games.HeroesOfTheStorm.EF.Models.TournamentMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("MapId");

                    b.Property<Guid>("TournamentSettingsId");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("TournamentSettingsId");

                    b.ToTable("TournamentMaps");
                });

            modelBuilder.Entity("Alexandria.Games.HeroesOfTheStorm.EF.Models.TournamentSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("MapBanCount");

                    b.Property<bool>("ReplayUploadRequired");

                    b.Property<Guid>("TournamentId");

                    b.HasKey("Id");

                    b.ToTable("TournamentSettings");
                });

            modelBuilder.Entity("Alexandria.Games.HeroesOfTheStorm.EF.Models.MapBan", b =>
                {
                    b.HasOne("Alexandria.Games.HeroesOfTheStorm.EF.Models.Map", "Map")
                        .WithMany("MapBans")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.Games.HeroesOfTheStorm.EF.Models.MatchReport", b =>
                {
                    b.HasOne("Alexandria.Games.HeroesOfTheStorm.EF.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.Games.HeroesOfTheStorm.EF.Models.TournamentMap", b =>
                {
                    b.HasOne("Alexandria.Games.HeroesOfTheStorm.EF.Models.Map", "Map")
                        .WithMany("TournamentMaps")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.Games.HeroesOfTheStorm.EF.Models.TournamentSettings", "TournamentSettings")
                        .WithMany("TournamentMaps")
                        .HasForeignKey("TournamentSettingsId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
