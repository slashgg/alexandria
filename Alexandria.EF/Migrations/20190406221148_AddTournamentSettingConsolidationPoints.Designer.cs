// <auto-generated />
using System;
using Alexandria.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Alexandria.EF.Migrations
{
    [DbContext(typeof(AlexandriaContext))]
    [Migration("20190406221148_AddTournamentSettingConsolidationPoints")]
    partial class AddTournamentSettingConsolidationPoints
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Alexandria.EF.Models.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("CompetitionLevelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("DefaultRoleId");

                    b.Property<string>("Description");

                    b.Property<Guid>("GameId");

                    b.Property<int?>("MaxTeamSize");

                    b.Property<int>("MinTeamSize")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("OwnerRoleId");

                    b.Property<string>("RulesSlug");

                    b.Property<string>("Slug");

                    b.Property<string>("Title")
                        .HasMaxLength(500);

                    b.Property<string>("TitleCardImageURL");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionLevelId");

                    b.HasIndex("DefaultRoleId");

                    b.HasIndex("GameId");

                    b.HasIndex("OwnerRoleId");

                    b.HasIndex("Slug");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Alexandria.EF.Models.CompetitionLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Level");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CompetitionLevels");
                });

            modelBuilder.Entity("Alexandria.EF.Models.CompetitionRankingGroupMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompetitionId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("PlayerRankingGroupId");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("PlayerRankingGroupId");

                    b.ToTable("CompetitionRankingGroupMemberships");
                });

            modelBuilder.Entity("Alexandria.EF.Models.ExternalAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("ExternalId");

                    b.Property<string>("Name");

                    b.Property<int>("Provider");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserProfileId");

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ExternalAccount");
                });

            modelBuilder.Entity("Alexandria.EF.Models.ExternalUserName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("GameId");

                    b.Property<string>("LogoURL");

                    b.Property<string>("ServiceName");

                    b.Property<string>("UserName");

                    b.Property<Guid>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ExternalUserName");
                });

            modelBuilder.Entity("Alexandria.EF.Models.ExternalUserNameGenerator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("LogoURL");

                    b.Property<string>("Name");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ExternalUserNameGenerators");
                });

            modelBuilder.Entity("Alexandria.EF.Models.FavoriteCompetition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompetitionId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("FavoriteCompetitions");
                });

            modelBuilder.Entity("Alexandria.EF.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("InternalIdentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<string>("Slug");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Alexandria.EF.Models.GameExternalUserNameGenerator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("ExternalUserNameGeneratorId");

                    b.Property<Guid>("GameId");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUserNameGeneratorId");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("GameUserNameGenerators");
                });

            modelBuilder.Entity("Alexandria.EF.Models.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("MatchOrder");

                    b.Property<Guid>("MatchSeriesId");

                    b.Property<int>("OutcomeState");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("MatchSeriesId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("MatchSeriesId");

                    b.Property<Guid>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("MatchSeriesId");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchParticipants");
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchParticipantResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("MatchId");

                    b.Property<int>("MatchOutcome");

                    b.Property<Guid>("MatchParticipantId");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchParticipantId");

                    b.ToTable("MatchParticipantResults");
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchSeries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CastingClaimRequired");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("GameId");

                    b.Property<DateTimeOffset?>("ScheduledAt");

                    b.Property<int>("State");

                    b.Property<Guid?>("TournamentRoundId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TournamentRoundId");

                    b.ToTable("MatchSeries");
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchSeriesCasting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("MatchSeriesId");

                    b.Property<DateTimeOffset?>("StartsAt");

                    b.Property<string>("StreamingURL");

                    b.Property<string>("VODURL");

                    b.HasKey("Id");

                    b.HasIndex("MatchSeriesId");

                    b.ToTable("MatchSeriesCastings");
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchSeriesCastingClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("MatchSeriesId");

                    b.Property<Guid>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("MatchSeriesId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("MatchSeriesCastingClaims");
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchSeriesCastingParticipation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("MatchSeriesCastingId");

                    b.Property<int>("Role");

                    b.Property<Guid>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("MatchSeriesCastingId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("MatchSeriesCastingParticipants");
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchSeriesScheduleRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("MatchSeriesId");

                    b.Property<int>("MatchType");

                    b.Property<Guid>("OriginTeamId");

                    b.Property<DateTimeOffset>("ProposedTimeSlot");

                    b.Property<int>("State");

                    b.Property<Guid>("TargetTeamId");

                    b.HasKey("Id");

                    b.HasIndex("MatchSeriesId");

                    b.HasIndex("OriginTeamId");

                    b.HasIndex("TargetTeamId");

                    b.ToTable("MatchSeriesScheduleRequests");
                });

            modelBuilder.Entity("Alexandria.EF.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ARN")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Alexandria.EF.Models.PlayerRanking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("GameId");

                    b.Property<decimal>("MMR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PlayerRankingGroupId");

                    b.Property<Guid>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerRankingGroupId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("PlayerRankings");
                });

            modelBuilder.Entity("Alexandria.EF.Models.PlayerRankingGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("GameId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("playerRankingGroups");
                });

            modelBuilder.Entity("Alexandria.EF.Models.ProfanityFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Severity");

                    b.Property<string>("Word");

                    b.HasKey("Id");

                    b.ToTable("ProfanityFilters");
                });

            modelBuilder.Entity("Alexandria.EF.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<Guid>("CompetitionId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("LogoURL");

                    b.Property<string>("Name");

                    b.Property<string>("Slug");

                    b.Property<int>("TeamState");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("Slug");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TeamInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("State");

                    b.Property<Guid>("TeamId");

                    b.Property<Guid?>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("TeamInvites");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TeamMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("TeamId");

                    b.Property<Guid>("TeamRoleId");

                    b.Property<Guid>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamRoleId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("TeamMemberships");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TeamMembershipHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Notes");

                    b.Property<Guid>("TeamId");

                    b.Property<Guid>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("TeamMembershipHistory");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TeamRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompetitionId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Permissions");

                    b.Property<bool>("RemoveProtection");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("TeamRoles");
                });

            modelBuilder.Entity("Alexandria.EF.Models.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ApplicationRequired");

                    b.Property<bool>("CanSignup");

                    b.Property<Guid>("CompetitionId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentTournamentId");

                    b.Property<DateTimeOffset?>("SignupCloseDate");

                    b.Property<DateTimeOffset?>("SignupOpenDate");

                    b.Property<string>("Slug");

                    b.Property<DateTimeOffset?>("StartDate");

                    b.Property<int>("State");

                    b.Property<string>("TokenImageURL");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("ParentTournamentId");

                    b.HasIndex("Slug");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("State");

                    b.Property<Guid>("TeamId");

                    b.Property<Guid>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentApplications");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentApplicationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Notes");

                    b.Property<int>("State");

                    b.Property<Guid>("TournamentApplicationId");

                    b.HasKey("Id");

                    b.HasIndex("TournamentApplicationId");

                    b.ToTable("TournamentApplicationHistory");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentApplicationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DefaultValue");

                    b.Property<int>("FieldType");

                    b.Property<bool>("Optional");

                    b.Property<string>("QuestionKey");

                    b.Property<string>("SelectOptions");

                    b.Property<Guid>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentApplicationQuestions");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentApplicationQuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("TournamentApplicationId");

                    b.Property<Guid>("TournamentApplicationQuestionId");

                    b.HasKey("Id");

                    b.HasIndex("TournamentApplicationId");

                    b.HasIndex("TournamentApplicationQuestionId");

                    b.ToTable("TournamentApplicationQuestionAnswers");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<int>("State");

                    b.Property<Guid>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentHistory");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentParticipation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("State");

                    b.Property<Guid>("TeamId");

                    b.Property<Guid>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentParticipations");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentParticipationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Notes");

                    b.Property<int>("State");

                    b.Property<Guid>("TeamId");

                    b.Property<Guid>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentParticipationHistories");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentRound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<string>("Name");

                    b.Property<int>("SeriesGameCount");

                    b.Property<int>("SeriesMaxGameCount");

                    b.Property<int>("SeriesMinGameCount");

                    b.Property<int>("SeriesPerRound");

                    b.Property<string>("Slug");

                    b.Property<DateTimeOffset?>("StartDate");

                    b.Property<Guid>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentRounds");
                });

            modelBuilder.Entity("Alexandria.EF.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarURL");

                    b.Property<DateTimeOffset?>("Birthday");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Alexandria.EF.Models.Competition", b =>
                {
                    b.HasOne("Alexandria.EF.Models.CompetitionLevel", "CompetitionLevel")
                        .WithMany("Competitions")
                        .HasForeignKey("CompetitionLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.TeamRole", "DefaultRole")
                        .WithMany()
                        .HasForeignKey("DefaultRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.Game", "Game")
                        .WithMany("Competitions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.TeamRole", "TeamOwnerRole")
                        .WithMany()
                        .HasForeignKey("OwnerRoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.CompetitionRankingGroupMembership", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Competition", "Competition")
                        .WithMany("CompetitionRankingGroupMemberships")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.PlayerRankingGroup", "PlayerRankingGroup")
                        .WithMany("CompetitionRankingGroupMemberships")
                        .HasForeignKey("PlayerRankingGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.ExternalAccount", b =>
                {
                    b.HasOne("Alexandria.EF.Models.UserProfile", "UserProfile")
                        .WithMany("ExternalAccounts")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.ExternalUserName", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Game", "Game")
                        .WithMany("ExternalUserNames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.UserProfile", "UserProfile")
                        .WithMany("ExternalUserNames")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.FavoriteCompetition", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.UserProfile", "UserProfile")
                        .WithMany("FavoriteCompetitions")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.GameExternalUserNameGenerator", b =>
                {
                    b.HasOne("Alexandria.EF.Models.ExternalUserNameGenerator", "ExternalUserNameGenerator")
                        .WithMany("GameExternalUserNameGenerators")
                        .HasForeignKey("ExternalUserNameGeneratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.Game", "Game")
                        .WithOne("GameExternalUserNameGenerator")
                        .HasForeignKey("Alexandria.EF.Models.GameExternalUserNameGenerator", "GameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.Match", b =>
                {
                    b.HasOne("Alexandria.EF.Models.MatchSeries", "MatchSeries")
                        .WithMany("Matches")
                        .HasForeignKey("MatchSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchParticipant", b =>
                {
                    b.HasOne("Alexandria.EF.Models.MatchSeries", "MatchSeries")
                        .WithMany("MatchParticipants")
                        .HasForeignKey("MatchSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.Team", "Team")
                        .WithMany("MatchParticipations")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchParticipantResult", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Match", "Match")
                        .WithMany("Results")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.MatchParticipant", "MatchParticipant")
                        .WithMany("Results")
                        .HasForeignKey("MatchParticipantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchSeries", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.TournamentRound", "TournamentRound")
                        .WithMany("MatchSeries")
                        .HasForeignKey("TournamentRoundId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchSeriesCasting", b =>
                {
                    b.HasOne("Alexandria.EF.Models.MatchSeries", "MatchSeries")
                        .WithMany("MatchSeriesCastings")
                        .HasForeignKey("MatchSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchSeriesCastingClaim", b =>
                {
                    b.HasOne("Alexandria.EF.Models.MatchSeries", "MatchSeries")
                        .WithMany("MatchSeriesCastingClaims")
                        .HasForeignKey("MatchSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchSeriesCastingParticipation", b =>
                {
                    b.HasOne("Alexandria.EF.Models.MatchSeriesCasting", "MatchSeriesCasting")
                        .WithMany("MatchSeriesCastingParticipants")
                        .HasForeignKey("MatchSeriesCastingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.MatchSeriesScheduleRequest", b =>
                {
                    b.HasOne("Alexandria.EF.Models.MatchSeries", "MatchSeries")
                        .WithMany("ScheduleRequests")
                        .HasForeignKey("MatchSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.Team", "OriginTeam")
                        .WithMany("OriginatingScheduleRequests")
                        .HasForeignKey("OriginTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.Team", "TargetTeam")
                        .WithMany("TargetedScheduleRequests")
                        .HasForeignKey("TargetTeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.Permission", b =>
                {
                    b.HasOne("Alexandria.EF.Models.UserProfile", "UserProfile")
                        .WithMany("Permissions")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.PlayerRanking", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Game", "Game")
                        .WithMany("PlayerRankings")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.PlayerRankingGroup", "PlayerRankingGroup")
                        .WithMany("PlayerRankings")
                        .HasForeignKey("PlayerRankingGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.UserProfile", "UserProfile")
                        .WithMany("PlayerRankings")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.PlayerRankingGroup", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Game", "Game")
                        .WithMany("PlayerRankingGroups")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.Team", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Competition", "Competition")
                        .WithMany("Teams")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.TeamInvite", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Team", "Team")
                        .WithMany("TeamInvites")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.UserProfile", "UserProfile")
                        .WithMany("TeamInvites")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.TeamMembership", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Team", "Team")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.TeamRole", "TeamRole")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("TeamRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.UserProfile", "UserProfile")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.TeamMembershipHistory", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Team", "Team")
                        .WithMany("TeamMembershipHistories")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.UserProfile", "UserProfile")
                        .WithMany("TeamMembershipHistories")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.TeamRole", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Competition", "Competition")
                        .WithMany("TeamRoles")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.Tournament", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Competition", "Competition")
                        .WithMany("Tournaments")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.Tournament", "ParentTournament")
                        .WithMany("Tournaments")
                        .HasForeignKey("ParentTournamentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Alexandria.EF.Models.TournamentSettings", "Settings", b1 =>
                        {
                            b1.Property<Guid>("TournamentId");

                            b1.Property<int?>("RoundRobinConsolidationPoint");

                            b1.Property<int?>("RoundRobinConsolidationPointMinimumWins");

                            b1.Property<int?>("RoundRobinDrawPoints");

                            b1.Property<int?>("RoundRobinLossPoints");

                            b1.Property<int?>("RoundRobinWinPoints");

                            b1.HasKey("TournamentId");

                            b1.ToTable("Tournaments");

                            b1.HasOne("Alexandria.EF.Models.Tournament")
                                .WithOne("Settings")
                                .HasForeignKey("Alexandria.EF.Models.TournamentSettings", "TournamentId")
                                .OnDelete(DeleteBehavior.Restrict);
                        });
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentApplication", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Team", "Team")
                        .WithMany("TournamentApplications")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.Tournament", "Tournament")
                        .WithMany("TournamentApplications")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentApplicationHistory", b =>
                {
                    b.HasOne("Alexandria.EF.Models.TournamentApplication", "TournamentApplication")
                        .WithMany("TournamentApplicationHistories")
                        .HasForeignKey("TournamentApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentApplicationQuestion", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Tournament", "Tournament")
                        .WithMany("TournamentApplicationQuestions")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentApplicationQuestionAnswer", b =>
                {
                    b.HasOne("Alexandria.EF.Models.TournamentApplication", "TournamentApplication")
                        .WithMany("TournamentApplicationQuestionAnswers")
                        .HasForeignKey("TournamentApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.TournamentApplicationQuestion", "TournamentApplicationQuestion")
                        .WithMany("TournamentApplicationQuestionAnswers")
                        .HasForeignKey("TournamentApplicationQuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentHistory", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Tournament", "Tournament")
                        .WithMany("TournamentHistories")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentParticipation", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Team", "Team")
                        .WithMany("TournamentParticipations")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.Tournament", "Tournament")
                        .WithMany("TournamentParticipations")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentParticipationHistory", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Team", "Team")
                        .WithMany("TournamentParticipationHistories")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alexandria.EF.Models.Tournament", "Tournament")
                        .WithMany("TournamentParticipationHistories")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentRound", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Tournament", "Tournament")
                        .WithMany("TournamentRounds")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
