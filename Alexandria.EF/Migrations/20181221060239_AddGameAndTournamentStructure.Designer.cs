// <auto-generated />
using System;
using Alexandria.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Alexandria.EF.Migrations
{
    [DbContext(typeof(AlexandriaContext))]
    [Migration("20181221060239_AddGameAndTournamentStructure")]
    partial class AddGameAndTournamentStructure
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Alexandria.EF.Models.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("GameId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Alexandria.EF.Models.ExternalAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("ExternalId");

                    b.Property<string>("Name");

                    b.Property<int>("Provider");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserProfileId");

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ExternalAccount");
                });

            modelBuilder.Entity("Alexandria.EF.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Alexandria.EF.Models.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanSignup");

                    b.Property<Guid>("CompetitionId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("SignupCloseDate");

                    b.Property<DateTimeOffset?>("SignupOpenDate");

                    b.Property<DateTimeOffset?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<int>("State");

                    b.Property<Guid>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentHistory");
                });

            modelBuilder.Entity("Alexandria.EF.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarURL");

                    b.Property<DateTime?>("Birthday");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasFilter("[DisplayName] IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Alexandria.EF.Models.Competition", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Game", "Game")
                        .WithMany("Competitions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.ExternalAccount", b =>
                {
                    b.HasOne("Alexandria.EF.Models.UserProfile", "UserProfile")
                        .WithMany("ExternalAccounts")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.Tournament", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Competition", "Competition")
                        .WithMany("Tournaments")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Alexandria.EF.Models.TournamentHistory", b =>
                {
                    b.HasOne("Alexandria.EF.Models.Tournament", "Tournament")
                        .WithMany("TournamentHistories")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
